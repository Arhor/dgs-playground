import com.github.gradle.node.npm.task.NpmTask
import com.github.gradle.node.npm.task.NpxTask

plugins {
    id "com.github.node-gradle.node"
    id "idea"
}

node {
    version = project.property("app.version.node")

    download = System.getenv('DOWNLOAD_NODE') != "false"

    workDir = file("${rootDir}/.gradle/nodejs")
    npmWorkDir = file("${rootDir}/.gradle/npm")
    yarnWorkDir = file("${rootDir}/.gradle/yarn")
}

idea {
    module {
        excludeDirs += files(
            "$projectDir/coverage",
            "$projectDir/dist",
            "$projectDir/node_modules",
        )
    }
}

//def synchronizeModel = tasks.register("synchronizeModel", Sync) {
//    dependsOn(":app-schema:build")
//
//    from "${project(":app-schema").buildDir}/generated/sources/js2ts"
//    into "${projectDir}/src/generated"
//}

def updateBrowserList = tasks.register("updateBrowserList", NpxTask) {
    dependsOn(npmInstall)

    workingDir.fileValue(projectDir)
    command.set("browserslist@latest")

    args = ["--update-db"]
}

def test = tasks.register("test", NpmTask) {
    dependsOn(npmInstall, updateBrowserList/*, synchronizeModel*/)

    group = "verification"
    workingDir.fileValue(projectDir)

    args = ["run", "test"]
}

tasks.register("build", NpmTask) {
    dependsOn(npmInstall, updateBrowserList/*, synchronizeModel*//*, test*/)

    group = "build"
    workingDir.fileValue(projectDir)

//    inputs.dir("src")
//    inputs.dir("node_modules")
//    inputs.files(
//        "index.html",
//        "package.json",
//        "package-lock.json",
//        "tsconfig.json",
//        "tsconfig.node.json",
//        "vite.config.json",
//    )
//
//    outputs.dir("dist")
//    outputs.cacheIf { true }

    args = ["run", "build"]
}
